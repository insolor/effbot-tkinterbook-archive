<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml">
    <link rel="media/img/effbot.ico">
    <link rel="stylesheet" href="media/css/effbot-min.css" type="text/css" media="screen">
    <link rel="stylesheet" href="media/css/effbotprint-min.css" type="text/css" media="print">
    <title>The Variable Classes (BooleanVar, DoubleVar, IntVar,&nbsp;StringVar)</title>
</head>

<body data-page-id="1976">
    <div id="doc2" class="yui-t2">
        <div id="hd"></div>
        <div id="bd">
            <div id="yui-main">
                <div class="yui-b">
                    <div class="content">
                        <div class="yui-g">
                            <p><a href="photoimage.htm">back</a></p>
                            <h1 class="maintitle">The Variable Classes (BooleanVar, DoubleVar, IntVar,&nbsp;StringVar)
                            </h1>
                        </div>
                        <div class="yui-ge">
                            <div class="yui-u first">
                                <p>If you program Tk using the Tcl language, you can ask the system to
                                    let you know when a variable is changed. The Tk toolkit can use this
                                    feature, called <i>tracing</i>, to update certain widgets when an
                                    associated variable is modified.</p>
                                <p>There&#8217;s no way to track changes to Python variables, but Tkinter
                                    allows you to create variable wrappers that can be used wherever Tk
                                    can use a traced Tcl variable.</p>
                                <h2>When to use the Variable Classes</h2>
                                <p>Variables can be used with most entry widgets to track changes to
                                    the entered value. The Checkbutton and Radiobutton widgets require
                                    variables to work properly.</p>
                                <p>Variables can also be used to validate the contents of an entry
                                    widget, and to change the text in label widgets.</p>
                                <h2 id="patterns">Patterns&#160;<a class="nav" href="#patterns" title="bookmark!">#</a>
                                </h2>
                                <p>To create a Tkinter variable, call the corresponding
                                    constructor:</p>
                                <pre class="python">
var = StringVar()</pre>
                                <p>Note that the constructor takes an optional widget argument, but no
                                    value argument; to set the value, call the <b>set</b> method:</p>
                                <pre class="python">
var = StringVar()
var.set(<span class="pystring">"hello"</span>)</pre>
                                <p>The constructor argument is only relevant if you&#8217;re running Tkinter
                                    with multiple Tk instances (which you shouldn&#8217;t do, unless you really
                                    know what you&#8217;re doing).</p>
                                <p>You can use the <b>trace</b> method to attach &#8220;observer&#8221; callbacks
                                    to the variable. The callback is called whenever the contents change:</p>
                                <pre class="python">
<span class="pykeyword">def</span> <span class="pyfunction">callback</span>(*args):
    <span class="pykeyword">print</span> <span class="pystring">"variable changed!"</span>

var = StringVar()
var.trace(<span class="pystring">"w"</span>, callback)
var.set(<span class="pystring">"hello"</span>)</pre>
                                <p class="fixme">FIXME: add Entry/Label/OptionMenu patterns</p>
                                <h2>Methods</h2>
                                <h3>get/set</h3>
                                <div class="method">
                                    <p><b>get()</b>
                                        <span>=&gt; value</span></p>
                                    <p><b>set(string)</b></p>
                                    <p>The <b>get</b> method returns the current value of the variable, as
                                        a Python object. For <b>BooleanVar</b> variables, the returned value
                                        is 0 for false, and 1 for true. For <b>DoubleVar</b> variables, the
                                        returned value is a Python float. For <b>IntVar</b>, it&#8217;s an integer.
                                        For <b>StringVar</b>, it&#8217;s either an ASCII string or a Unicode string,
                                        depending on the contents.</p>
                                    <p>The <b>set</b> method updates the variable, and notifies all
                                        variable observers. You can either pass in a value of the right type,
                                        or a string.</p>
                                </div>
                                <h3>trace</h3>
                                <div class="method">
                                    <p><b>trace(mode, callback)</b>
                                        <span>=&gt; string</span></p>
                                    <p><b>trace_variable(mode, callback)</b></p>
                                    <p>Add a variable observer. Returns the internal name of the observer
                                        (you can use this to unregister the observer; see below).</p>
                                    <p>The <b>mode</b> argument is one of &#8220;r&#8221; (call observer
                                        when variable is read by someone), &#8220;w&#8221; (call when variable
                                        is written by someone), or &#8220;u&#8221; (undefine; call when the
                                        variable is deleted).</p>
                                    <p class="fixme">FIXME: describe the mode argument and how the
                                        callback should look, and when it is called.</p>
                                </div>
                                <h3>trace_vdelete</h3>
                                <div class="method">
                                    <p><b>trace_vdelete(mode, observer name)</b></p>
                                    <p>Remove an observer. The observer name is the string returned by
                                        <b>trace_variable</b>, when the observer was first registered.</p>
                                </div>
                                <h3>trace_vinfo</h3>
                                <div class="method">
                                    <p><b>trace_vinfo()</b> <span>=&gt;list</span></p>
                                    <p class="fixme">FIXME: add description</p>
                                </div>
                            </div>
                            <div class="yui-u">&#160;</div>
                        </div>
                        <div class="yui-g">
                            <p><a href="photoimage.htm">back</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="yui-b">
                <div id="menu">
                    <ul>
                        <li><b><a href="https://effbot.org" title="Go to effbot.org.">::: effbot.org</a></b></li>
                        <li><b><a href="index.html" title="Go to tkinterbook index page.">::: tkinterbook :::</a></b>
                        </li>
                    </ul>
                    <ul>
                        <li><b>::: contents</b></li>
                    </ul>
                    <ul>
                        <li>
                            <ul>
                                <li><a href="#patterns">Patterns</a></li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div id="ft">
            <p><a href="https://www.djangoproject.com/"><img
                        src="media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site."
                        style="vertical-align: bottom;" width="80" height="15"></a>
                rendered by a <a
                    href="https://www.djangoproject.com/">django</a>
                application. hosted by <a
                    href="https://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.
            </p>
        </div>
    </div>
    <script src="media/js/effbot-min.js" type="text/javascript"></script>
</body>

</html>
