<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml">
    <link rel="media/img/effbot.ico">
    <link rel="stylesheet" href="media/css/effbot-min.css" type="text/css" media="screen">
    <link rel="stylesheet" href="media/css/effbotprint-min.css" type="text/css" media="print">
    <title>Hello,&nbsp;Again</title>
</head>

<body data-page-id="1968">
    <div id="doc2" class="yui-t2">
        <div id="hd"></div>
        <div id="bd">
            <div id="yui-main">
                <div class="yui-b">
                    <div class="content">
                        <div class="yui-g">
                            <p><a href="tkinter-hello-tkinter.htm">back</a>&#160;<a href="tkinter-classes.htm">next</a>
                            </p>
                            <h1 class="maintitle">Hello,&nbsp;Again</h1>
                        </div>
                        <div class="yui-ge">
                            <div class="yui-u first">
                                <p>When you write larger programs, it is usually a good idea to
                                    wrap your code up in one or more classes. The following example is
                                    adapted from the <span>&#8220;hello world&#8221;</span> program in Matt
                                    Conway&#8217;s <s><a
                                            href="https://www.python.org/topics/tkinter/"><i>A
                                                Tkinter
                                                Life Preserver</i></a></s> (dead link).</p>
                            </div>
                            <div class="yui-u">&#160;</div>
                        </div>
                        <div class="yui-g">
                            <div class="example wide">
                                <b>Our Second Tkinter Program</b>
                                <pre class="python wide">
<span class="pykeyword">from</span> Tkinter <span class="pykeyword">import</span> *

<span class="pykeyword">class</span> <span class="pyclass">App</span>:

    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, master):

        frame = Frame(master)
        frame.pack()

        self.button = Button(
            frame, text=<span class="pystring">"QUIT"</span>, fg=<span class="pystring">"red"</span>, command=frame.quit
            )
        self.button.pack(side=LEFT)

        self.hi_there = Button(frame, text=<span class="pystring">"Hello"</span>, command=self.say_hi)
        self.hi_there.pack(side=LEFT)

    <span class="pykeyword">def</span> <span class="pyfunction">say_hi</span>(self):
        <span class="pykeyword">print</span> <span class="pystring">"hi there, everyone!"</span>

root = Tk()

app = App(root)

root.mainloop()
root.destroy() <span class="pycomment"># optional; see description below</span></pre>
                            </div>
                        </div>
                        <div class="yui-ge">
                            <div class="yui-u first">
                                <h2>Running the Example</h2>
                                <p>When you run this example, the following window appears.</p>
                                <div class="figure">
                                    <b>Running the sample program (using Tk 8.0 on a Windows 95 box)</b>
                                    <p>
                                        <img alt="media/cache/76734d5c44455920d98197bd2958fec7.gif" width="132" />
                                    </p>
                                </div>
                                <p>If you click the right button, the text <span>&#8220;<b>hi there,
                                            everyone!</b>&#8221;</span> is printed to the console. If you click the
                                    left button, the program stops.</p>
                                <div class="note">
                                    <p><b>Note:</b> Some Python development environments have problems
                                        running Tkinter examples like this one. The problem is usually that
                                        the enviroment uses Tkinter itself, and the <b>mainloop</b> call and
                                        the <b>quit</b> calls interact with the environment&#8217;s expectations. Other
                                        environments may misbehave if you leave out the explicit <b>destroy</b> call. If
                                        the example doesn&#8217;t behave as expected, check for Tkinter-specific
                                        documentation for your development environment.

                                    </p>
                                </div>
                                <h2>Details</h2>
                                <p>This sample application is written as a class. The constructor
                                    (the <b>__init__</b> method) is called with a parent widget (the
                                    <b>master</b>), to which it adds a number of child widgets. The
                                    constructor starts by creating a <b>Frame</b> widget. A frame is
                                    a simple container, and is in this case only used to hold the other
                                    two widgets.</p>
                                <pre>
class App:
    def __init__(self, master):
        frame = Frame(master)
        frame.pack()
</pre>
                                <p>The frame instance is stored in a local variable called <b>frame</b>.
                                    After creating the widget, we immediately call the <b>pack</b> method
                                    to make the frame visible.</p>
                                <p>We then create two <b>Button</b> widgets, as children to the
                                    frame.</p>
                            </div>
                            <div class="yui-u">&#160;</div>
                        </div>
                        <div class="yui-g">
                            <pre class="wide wide">
self.button = Button(frame, text="QUIT", fg="red", command=frame.quit)
self.button.pack(side=LEFT)

self.hi_there = Button(frame, text="Hello", command=self.say_hi)
self.hi_there.pack(side=LEFT)
</pre>
                        </div>
                        <div class="yui-ge">
                            <div class="yui-u first">
                                <p>This time, we pass a number of <b>options</b> to the
                                    constructor, as keyword arguments. The first button is labelled
                                    <span>&#8220;QUIT&#8221;</span>, and is made red (<b>fg</b> is short for
                                    <b>foreground</b>). The second is labelled <span>&#8220;Hello&#8221;</span>. Both
                                    buttons also take a <b>command</b> option. This option specifies
                                    a function, or (as in this case) a bound method, which will be
                                    called when the button is clicked.</p>
                                <p>The button instances are stored in instance attributes. They are
                                    both packed, but this time with the <b>side=LEFT</b> argument.
                                    This means that they will be placed as far left as possible in the
                                    frame; the first button is placed at the frame&#8217;s left edge, and the
                                    second is placed just to the right of the first one (at the left
                                    edge of the <i>remaining space</i> in the frame, that is). By
                                    default, widgets are packed relative to their parent (which is
                                    <b>master</b> for the frame widget, and the frame itself for the
                                    buttons). If the side is not given, it defaults to <b>TOP</b>.</p>
                                <p>The <span>&#8220;hello&#8221;</span> button callback is given next. It
                                    simply prints a message to the console everytime the button is
                                    pressed:</p>
                                <pre>
def say_hi(self):
    print "hi there, everyone!"
</pre>
                                <p>Finally, we provide some script level code that creates a <b>Tk</b>
                                    root widget, and one instance of the <b>App</b> class using the root
                                    widget as its parent:</p>
                                <pre>
root = Tk()

app = App(root)

root.mainloop()
root.destroy()
</pre>
                                <p>The <b>mainloop</b> call enters the Tk event loop, in which the application will stay
                                    until the <b>quit</b> method is called (just click the QUIT button), or the window
                                    is closed.</p>
                                <p>The <b>destroy</b> call is only required if you run this example under certain
                                    development environments; it explicitly destroys the main window when the event loop
                                    is terminated. Some development environments won&#8217;t terminate the Python
                                    process unless this is done.</p>
                                <h2>More on widget references</h2>
                                <p>In the second example, the frame widget is stored in a local
                                    variable named <b>frame</b>, while the button widgets are stored
                                    in two instance attributes. Isn&#8217;t there a serious problem hidden in
                                    here: what happens when the <b>__init__</b> function returns and
                                    the <b>frame</b> variable goes out of scope?</p>
                                <p>Just relax; there&#8217;s actually no need to keep a reference to the
                                    widget instance. Tkinter automatically maintains a widget tree (via
                                    the <b>master</b> and <b>children</b> attributes of each widget
                                    instance), so a widget won&#8217;t disappear when the application&#8217;s last
                                    reference goes away; it must be explicitly destroyed before this
                                    happens (using the <b>destroy</b> method). But if you wish to do
                                    something with the widget after it has been created, you better
                                    keep a reference to the widget instance yourself.</p>
                                <p>Note that if you don&#8217;t need to keep a reference to a widget, it
                                    might be tempting to create and pack it on a single line:</p>
                            </div>
                            <div class="yui-u">&#160;</div>
                        </div>
                        <div class="yui-g">
                            <pre class="wide wide">
Button(frame, text="Hello", command=self.hello).pack(side=LEFT)
</pre>
                        </div>
                        <div class="yui-ge">
                            <div class="yui-u first">
                                <p>Don&#8217;t store the result from this operation; you&#8217;ll only get
                                    disappointed when you try to use that value (the <b>pack</b>
                                    method returns <b>None</b>). To be on the safe side, it might be
                                    better to always separate construction from packing:</p>
                                <pre>
w = Button(frame, text="Hello", command=self.hello) 
w.pack(side=LEFT)
</pre>
                                <h2 style="sect1">More on widget names</h2>
                                <p>Another source of confusion, especially for those who have some
                                    experience of programming Tk using Tcl, is Tkinter&#8217;s notion of the
                                    <i>widget name</i>. In Tcl, you must explicitly name each widget.
                                    For example, the following Tcl command creates a <b>Button</b>
                                    named <span>&#8220;ok&#8221;</span>, as a child to a widget named <span>
                                        &#8220;dialog&#8221;</span> (which in turn is a child of the root window,
                                    <span>&#8220;.&#8221;</span>).</p>
                                <pre>
button .dialog.ok
</pre>
                                <p>The corresponding Tkinter call would look like:</p>
                                <pre>
ok = Button(dialog)
</pre>
                                <p>However, in the Tkinter case, <b>ok</b> and <b>dialog</b>
                                    are references to widget instances, not the actual names of the
                                    widgets. Since Tk itself needs the names, Tkinter automatically
                                    assigns a unique name to each new widget. In the above case, the
                                    dialog name is probably something like <span>&#8220;.1428748,&#8221;</span> and
                                    the button could be named <span>&#8220;.1428748.1432920&#8221;</span>. If you
                                    wish to get the full name of a Tkinter widget, simply use the
                                    <b>str</b> function on the widget instance:</p>
                                <pre>
&gt;&gt;&gt; print str(ok)
.1428748.1432920
</pre>
                                <p>(if you print something, Python automatically uses the <tt>
                                        str</tt> function to find out what to print. But obviously, an
                                    operation like <span>&#8220;name = ok&#8221;</span> won&#8217;t do the that, so make
                                    sure always to explicitly use <b>str</b> if you need the
                                    name).</p>
                                <p>If you really need to specify the name of a widget, you can use
                                    the <b>name</b> option when you create the widget. One (and most
                                    likely the only) reason for this is if you need to interface with
                                    code written in Tcl.</p>
                                <p>In the following example, the resulting widget is named <span>
                                        &#8220;<b>.dialog.ok</b>&#8221;</span> (or, if you forgot to name the dialog,
                                    something like <span>&#8220;<b>.1428748.ok</b>&#8221;</span>):</p>
                                <pre>
ok = Button(dialog, name="ok")
</pre>
                                <p>To avoid conflicts with Tkinter&#8217;s naming scheme, don&#8217;t use names
                                    which only contain digits. Also note that <b>name</b> is a <span>
                                        &#8220;creation only&#8221;</span> option; you cannot change the name once
                                    you&#8217;ve created the widget.</p>
                            </div>
                            <div class="yui-u">&#160;</div>
                        </div>
                        <div class="yui-g">
                            <p><a href="tkinter-hello-tkinter.htm">back</a>&#160;<a href="tkinter-classes.htm">next</a>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="yui-b">
                <div id="menu">
                    <ul>
                        <li><b><a href="https://effbot.org" title="Go to effbot.org.">::: effbot.org</a></b></li>
                        <li><b><a href="index.html" title="Go to tkinterbook index page.">::: tkinterbook :::</a></b>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div id="ft">
            <p><a href="https://www.djangoproject.com/"><img
                        src="media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site."
                        style="vertical-align: bottom;" width="80" height="15"></a>
                rendered by a <a
                    href="https://www.djangoproject.com/">django</a>
                application. hosted by <a
                    href="https://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.
            </p>
        </div>
    </div>
    <script src="media/js/effbot-min.js" type="text/javascript"></script>
</body>

</html>
